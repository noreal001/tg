import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN, ADMIN_IDS
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Mini App
    keyboard = [
        [InlineKeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app={"url": "https://your-domain.com/shop"})]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Å–ª–∞, —Ñ–ª–∞–∫–æ–Ω—ã –∏ —Ä–∞—Å—Ç–≤–æ—Ä—ã.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup
    )

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")],
        [InlineKeyboardButton("üìã –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "admin_stats":
        await show_admin_stats(query)
    elif query.data == "admin_products":
        await show_admin_products(query)
    elif query.data == "admin_orders":
        await show_admin_orders(query)

async def show_admin_stats(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = """
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:

üõ¢Ô∏è –ú–∞—Å–ª–∞: 3 —Ç–æ–≤–∞—Ä–∞
üß™ –§–ª–∞–∫–æ–Ω—ã: 3 —Ç–æ–≤–∞—Ä–∞  
üíß –†–∞—Å—Ç–≤–æ—Ä—ã: 3 —Ç–æ–≤–∞—Ä–∞

üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: 0
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: 0 ‚ÇΩ
    """
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup)

async def show_admin_products(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    products = db.get_all_products()
    
    text = "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:\n\n"
    for product in products:
        text += f"‚Ä¢ {product['name']} - {product['price']} ‚ÇΩ (–æ—Å—Ç–∞—Ç–æ–∫: {product['stock']})\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def show_admin_orders(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã"""
    text = "üìã –ó–∞–∫–∞–∑—ã:\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main() 