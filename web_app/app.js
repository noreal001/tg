// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let state = {
    currentView: 'categories',
    currentCategory: null,
    currentProduct: null,
    cart: [],
    user: tg.initDataUnsafe?.user || null
};

// API endpoints (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ URL)
const API_BASE = 'http://localhost:5000/api';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
});

function initializeApp() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã Telegram
    if (tg.colorScheme === 'dark') {
        document.body.style.background = '#000';
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
    loadCart();
    updateCartCount();
}

function setupEventListeners() {
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    document.querySelectorAll('.category-card').forEach(card => {
        card.addEventListener('click', () => {
            const category = card.dataset.category;
            showProducts(category);
        });
    });

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.getElementById('cart-btn').addEventListener('click', showCart);
    document.getElementById('back-btn').addEventListener('click', showCategories);
    document.getElementById('back-to-products').addEventListener('click', showProducts);
    document.getElementById('back-to-main').addEventListener('click', showCategories);
    document.getElementById('back-to-cart').addEventListener('click', showCart);
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function showCategories() {
    state.currentView = 'categories';
    hideAllSections();
    document.querySelector('.categories').style.display = 'block';
    document.querySelector('.categories').classList.add('fade-in');
}

function showProducts(category) {
    state.currentView = 'products';
    state.currentCategory = category;
    
    hideAllSections();
    document.getElementById('products-section').style.display = 'block';
    document.getElementById('products-section').classList.add('fade-in');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const categoryNames = {
        'oils': 'üõ¢Ô∏è –ú–∞—Å–ª–∞',
        'bottles': 'üß™ –§–ª–∞–∫–æ–Ω—ã',
        'solutions': 'üíß –†–∞—Å—Ç–≤–æ—Ä—ã'
    };
    document.getElementById('category-title').textContent = categoryNames[category];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    loadProducts(category);
}

function showProductDetail(productId) {
    state.currentView = 'product-detail';
    state.currentProduct = productId;
    
    hideAllSections();
    document.getElementById('product-detail').style.display = 'block';
    document.getElementById('product-detail').classList.add('fade-in');
    
    loadProductDetail(productId);
}

function showCart() {
    state.currentView = 'cart';
    
    hideAllSections();
    document.getElementById('cart-section').style.display = 'block';
    document.getElementById('cart-section').classList.add('fade-in');
    
    renderCart();
}

function showCheckout() {
    state.currentView = 'checkout';
    
    hideAllSections();
    document.getElementById('checkout-section').style.display = 'block';
    document.getElementById('checkout-section').classList.add('fade-in');
    
    renderCheckout();
}

function hideAllSections() {
    document.querySelectorAll('section').forEach(section => {
        section.style.display = 'none';
        section.classList.remove('fade-in');
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadProducts(category) {
    const productsGrid = document.getElementById('products-grid');
    productsGrid.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>';
    
    try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const products = getMockProducts(category);
        renderProducts(products);
    } catch (error) {
        productsGrid.innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</div>';
    }
}

function loadProductDetail(productId) {
    const detailContent = document.getElementById('product-detail-content');
    detailContent.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
    
    try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
        const product = getMockProduct(productId);
        renderProductDetail(product);
    } catch (error) {
        detailContent.innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞</div>';
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
function renderProducts(products) {
    const productsGrid = document.getElementById('products-grid');
    
    if (products.length === 0) {
        productsGrid.innerHTML = '<div class="empty-state"><h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3></div>';
        return;
    }
    
    productsGrid.innerHTML = products.map(product => `
        <div class="product-card" onclick="showProductDetail(${product.id})">
            <div class="product-image">
                ${getProductIcon(product.category)}
            </div>
            <div class="product-info">
                <h3>${product.name}</h3>
                <div class="product-price">${product.price} ‚ÇΩ</div>
                <div class="product-stock">–û—Å—Ç–∞—Ç–æ–∫: ${product.stock} —à—Ç.</div>
                <button class="add-to-cart-btn" onclick="event.stopPropagation(); addToCart(${product.id})">
                    –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                </button>
            </div>
        </div>
    `).join('');
}

function renderProductDetail(product) {
    const detailContent = document.getElementById('product-detail-content');
    
    detailContent.innerHTML = `
        <div class="product-detail-image">
            ${getProductIcon(product.category)}
        </div>
        <div class="product-detail-info">
            <h3>${product.name}</h3>
            <div class="product-detail-description">${product.description}</div>
            <div class="product-detail-price">${product.price} ‚ÇΩ</div>
            <div class="quantity-controls">
                <button class="quantity-btn" onclick="changeQuantity(-1)">-</button>
                <span class="quantity-display" id="quantity-display">1</span>
                <button class="quantity-btn" onclick="changeQuantity(1)">+</button>
            </div>
            <button class="add-to-cart-btn" onclick="addToCartWithQuantity(${product.id})">
                –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
            </button>
        </div>
    `;
}

function renderCart() {
    const cartContent = document.getElementById('cart-content');
    
    if (state.cart.length === 0) {
        cartContent.innerHTML = '<div class="empty-state"><h3>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3></div>';
        return;
    }
    
    const cartItems = state.cart.map(item => `
        <div class="cart-item">
            <div class="cart-item-info">
                <h4>${item.name}</h4>
                <div class="cart-item-price">${item.price} ‚ÇΩ</div>
            </div>
            <div class="cart-item-quantity">
                <button class="quantity-btn" onclick="updateCartItemQuantity(${item.id}, ${item.quantity - 1})">-</button>
                <span>${item.quantity}</span>
                <button class="quantity-btn" onclick="updateCartItemQuantity(${item.id}, ${item.quantity + 1})">+</button>
            </div>
        </div>
    `).join('');
    
    const total = state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    cartContent.innerHTML = `
        ${cartItems}
        <div class="cart-total">
            –ò—Ç–æ–≥–æ: ${total} ‚ÇΩ
        </div>
        <button class="checkout-btn" onclick="showCheckout()">
            –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
        </button>
    `;
}

function renderCheckout() {
    const checkoutContent = document.getElementById('checkout-content');
    const total = state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const deliveryCost = total >= 2000 ? 0 : 300;
    const finalTotal = total + deliveryCost;
    
    checkoutContent.innerHTML = `
        <div class="order-summary">
            <h3>–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞</h3>
            <div class="summary-item">
                <span>–¢–æ–≤–∞—Ä—ã:</span>
                <span>${total} ‚ÇΩ</span>
            </div>
            <div class="summary-item">
                <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                <span>${deliveryCost} ‚ÇΩ</span>
            </div>
            <div class="summary-total">
                <span>–ò—Ç–æ–≥–æ:</span>
                <span>${finalTotal} ‚ÇΩ</span>
            </div>
        </div>
        
        <form id="checkout-form">
            <div class="form-group">
                <label for="name">–ò–º—è</label>
                <input type="text" id="name" required>
            </div>
            <div class="form-group">
                <label for="phone">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input type="tel" id="phone" required>
            </div>
            <div class="form-group">
                <label for="address">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</label>
                <textarea id="address" rows="3" required></textarea>
            </div>
            <button type="submit" class="place-order-btn">–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</button>
        </form>
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    document.getElementById('checkout-form').addEventListener('submit', handleOrderSubmit);
}

// –ö–æ—Ä–∑–∏–Ω–∞
function addToCart(productId) {
    addToCartWithQuantity(productId, 1);
}

function addToCartWithQuantity(productId, quantity) {
    const product = getMockProduct(productId);
    
    const existingItem = state.cart.find(item => item.id === productId);
    
    if (existingItem) {
        existingItem.quantity += quantity;
    } else {
        state.cart.push({
            id: productId,
            name: product.name,
            price: product.price,
            quantity: quantity
        });
    }
    
    saveCart();
    updateCartCount();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    tg.showAlert('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!');
}

function updateCartItemQuantity(productId, newQuantity) {
    if (newQuantity <= 0) {
        state.cart = state.cart.filter(item => item.id !== productId);
    } else {
        const item = state.cart.find(item => item.id === productId);
        if (item) {
            item.quantity = newQuantity;
        }
    }
    
    saveCart();
    updateCartCount();
    renderCart();
}

function loadCart() {
    const savedCart = localStorage.getItem('shop_cart');
    if (savedCart) {
        state.cart = JSON.parse(savedCart);
    }
}

function saveCart() {
    localStorage.setItem('shop_cart', JSON.stringify(state.cart));
}

function updateCartCount() {
    const count = state.cart.reduce((sum, item) => sum + item.quantity, 0);
    document.getElementById('cart-count').textContent = count;
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function handleOrderSubmit(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const orderData = {
        name: formData.get('name') || document.getElementById('name').value,
        phone: formData.get('phone') || document.getElementById('phone').value,
        address: formData.get('address') || document.getElementById('address').value,
        items: state.cart,
        total: state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0)
    };
    
    try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        console.log('Order data:', orderData);
        
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        state.cart = [];
        saveCart();
        updateCartCount();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        tg.showAlert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        showCategories();
        
    } catch (error) {
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getProductIcon(category) {
    const icons = {
        'oils': 'üõ¢Ô∏è',
        'bottles': 'üß™',
        'solutions': 'üíß'
    };
    return icons[category] || 'üì¶';
}

function changeQuantity(delta) {
    const display = document.getElementById('quantity-display');
    let currentQuantity = parseInt(display.textContent);
    currentQuantity = Math.max(1, currentQuantity + delta);
    display.textContent = currentQuantity;
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã)
function getMockProducts(category) {
    const products = {
        'oils': [
            { id: 1, name: '–ö–æ–∫–æ—Å–æ–≤–æ–µ –º–∞—Å–ª–æ', description: '–ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –∫–æ–∫–æ—Å–æ–≤–æ–µ –º–∞—Å–ª–æ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç–∂–∏–º–∞', price: 1200, stock: 50, category: 'oils' },
            { id: 2, name: '–ú–∞—Å–ª–æ –∂–æ–∂–æ–±–∞', description: '–£–≤–ª–∞–∂–Ω—è—é—â–µ–µ –º–∞—Å–ª–æ –∂–æ–∂–æ–±–∞ –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π', price: 1500, stock: 30, category: 'oils' },
            { id: 3, name: '–ê—Ä–≥–∞–Ω–æ–≤–æ–µ –º–∞—Å–ª–æ', description: '–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–µ –∞—Ä–≥–∞–Ω–æ–≤–æ–µ –º–∞—Å–ª–æ –¥–ª—è –≤–æ–ª–æ—Å', price: 1800, stock: 25, category: 'oils' }
        ],
        'bottles': [
            { id: 4, name: '–°—Ç–µ–∫–ª—è–Ω–Ω—ã–π —Ñ–ª–∞–∫–æ–Ω 30–º–ª', description: '–°—Ç–∏–ª—å–Ω—ã–π —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–π —Ñ–ª–∞–∫–æ–Ω —Å –ø–∏–ø–µ—Ç–∫–æ–π', price: 250, stock: 100, category: 'bottles' },
            { id: 5, name: '–§–ª–∞–∫–æ–Ω —Å —Ä–∞—Å–ø—ã–ª–∏—Ç–µ–ª–µ–º', description: '–£–¥–æ–±–Ω—ã–π —Ñ–ª–∞–∫–æ–Ω —Å –º–µ–ª–∫–æ–¥–∏—Å–ø–µ—Ä—Å–Ω—ã–º —Ä–∞—Å–ø—ã–ª–∏—Ç–µ–ª–µ–º', price: 350, stock: 80, category: 'bottles' },
            { id: 6, name: '–î–æ–∑–∞—Ç–æ—Ä-—Ä–æ–ª–ª–µ—Ä', description: '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –¥–æ–∑–∞—Ç–æ—Ä-—Ä–æ–ª–ª–µ—Ä –¥–ª—è –º–∞—Å–µ–ª', price: 400, stock: 60, category: 'bottles' }
        ],
        'solutions': [
            { id: 7, name: '–ì–ª–∏—Ü–µ—Ä–∏–Ω–æ–≤—ã–π —Ä–∞—Å—Ç–≤–æ—Ä', description: '–£–≤–ª–∞–∂–Ω—è—é—â–∏–π —Ä–∞—Å—Ç–≤–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª–∏—Ü–µ—Ä–∏–Ω–∞', price: 800, stock: 40, category: 'solutions' },
            { id: 8, name: '–°–ø–∏—Ä—Ç–æ–≤–æ–π —Ä–∞—Å—Ç–≤–æ—Ä', description: '–ê–Ω—Ç–∏—Å–µ–ø—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Ä—Ç–æ–≤–æ–π —Ä–∞—Å—Ç–≤–æ—Ä', price: 600, stock: 70, category: 'solutions' },
            { id: 9, name: '–ú–∞—Å–ª—è–Ω—ã–π —Ä–∞—Å—Ç–≤–æ—Ä', description: '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å–ª—è–Ω—ã–π —Ä–∞—Å—Ç–≤–æ—Ä', price: 950, stock: 35, category: 'solutions' }
        ]
    };
    
    return products[category] || [];
}

function getMockProduct(productId) {
    const allProducts = [
        ...getMockProducts('oils'),
        ...getMockProducts('bottles'),
        ...getMockProducts('solutions')
    ];
    
    return allProducts.find(p => p.id === productId);
} 