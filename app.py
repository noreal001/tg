#!/usr/bin/env python3
"""
–ï–¥–∏–Ω–æ–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç API –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
"""

import os
from flask import Flask, send_from_directory, request, jsonify
from flask_cors import CORS
from database import Database
from config import ADMIN_IDS, DELIVERY_COST, MIN_ORDER_FOR_FREE_DELIVERY

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.static_folder = 'web_app'

# –í–µ–±-–º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    return send_from_directory('web_app', 'index.html')

@app.route('/<path:filename>')
def serve_static(filename):
    return send_from_directory('web_app', filename)

# API –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/api/products/<category>', methods=['GET'])
def get_products_by_category(category):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        products = db.get_products_by_category(category)
        return jsonify({
            'success': True,
            'products': products
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/products/<int:product_id>', methods=['GET'])
def get_product(product_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID"""
    try:
        product = db.get_product_by_id(product_id)
        if product:
            return jsonify({
                'success': True,
                'product': product
            })
        else:
            return jsonify({
                'success': False,
                'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/cart/add', methods=['POST'])
def add_to_cart():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        data = request.get_json()
        user_id = data.get('user_id')
        product_id = data.get('product_id')
        quantity = data.get('quantity', 1)
        
        if not user_id or not product_id:
            return jsonify({
                'success': False,
                'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã user_id –∏ product_id'
            }), 400
        
        db.add_to_cart(user_id, product_id, quantity)
        
        return jsonify({
            'success': True,
            'message': '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/cart/<int:user_id>', methods=['GET'])
def get_cart(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        cart_items = db.get_cart(user_id)
        return jsonify({
            'success': True,
            'cart': cart_items
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/cart/update', methods=['POST'])
def update_cart_item():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        data = request.get_json()
        cart_id = data.get('cart_id')
        quantity = data.get('quantity')
        
        if cart_id is None or quantity is None:
            return jsonify({
                'success': False,
                'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã cart_id –∏ quantity'
            }), 400
        
        db.update_cart_item(cart_id, quantity)
        
        return jsonify({
            'success': True,
            'message': '–ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/orders/create', methods=['POST'])
def create_order():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        data = request.get_json()
        user_id = data.get('user_id')
        delivery_address = data.get('delivery_address')
        
        if not user_id or not delivery_address:
            return jsonify({
                'success': False,
                'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã user_id –∏ delivery_address'
            }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart_items = db.get_cart(user_id)
        
        if not cart_items:
            return jsonify({
                'success': False,
                'error': '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'
            }), 400
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_amount = sum(item['total'] for item in cart_items)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_cost = 0 if total_amount >= MIN_ORDER_FOR_FREE_DELIVERY else DELIVERY_COST
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = db.create_order(user_id, total_amount, delivery_address, delivery_cost)
        
        return jsonify({
            'success': True,
            'order_id': order_id,
            'total_amount': total_amount + delivery_cost,
            'delivery_cost': delivery_cost
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/orders/<int:user_id>', methods=['GET'])
def get_user_orders(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        orders = db.get_user_orders(user_id)
        return jsonify({
            'success': True,
            'orders': orders
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.route('/api/admin/products', methods=['GET'])
def admin_get_products():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∞–¥–º–∏–Ω)"""
    try:
        products = db.get_all_products()
        return jsonify({
            'success': True,
            'products': products
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/admin/products', methods=['POST'])
def admin_add_product():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∞–¥–º–∏–Ω)"""
    try:
        data = request.get_json()
        name = data.get('name')
        description = data.get('description')
        price = data.get('price')
        category = data.get('category')
        stock = data.get('stock')
        image_url = data.get('image_url', '')
        
        if not all([name, description, price, category, stock]):
            return jsonify({
                'success': False,
                'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –≤—Å–µ –ø–æ–ª—è'
            }), 400
        
        product_id = db.add_product(name, description, price, category, stock, image_url)
        
        return jsonify({
            'success': True,
            'product_id': product_id
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/admin/products/<int:product_id>', methods=['PUT'])
def admin_update_product(product_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∞–¥–º–∏–Ω)"""
    try:
        data = request.get_json()
        name = data.get('name')
        description = data.get('description')
        price = data.get('price')
        category = data.get('category')
        stock = data.get('stock')
        image_url = data.get('image_url', '')
        
        if not all([name, description, price, category, stock]):
            return jsonify({
                'success': False,
                'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –≤—Å–µ –ø–æ–ª—è'
            }), 400
        
        db.update_product(product_id, name, description, price, category, stock, image_url)
        
        return jsonify({
            'success': True,
            'message': '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/admin/products/<int:product_id>', methods=['DELETE'])
def admin_delete_product(product_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∞–¥–º–∏–Ω)"""
    try:
        db.delete_product(product_id)
        
        return jsonify({
            'success': True,
            'message': '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print("üì± Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: /")
    print("üîå API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: /api/")
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=False
    ) 